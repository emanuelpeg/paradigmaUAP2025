module Main exposing (..)

-- Ejercicio 1: Búsqueda Genérica
-- Busca un elemento en una lista usando una función de comparación.
buscar : List Int -> (Int -> Int -> Bool) -> Int
buscar lista comparador =
    case lista of
        [] ->
            0

        x :: xs ->
            List.foldl
                (\elemento acc ->
                    if comparador elemento acc then
                        elemento

                    else
                        acc
                )
                x
                xs


-- Ejercicio 2: Máximo y Mínimo
-- Encuentra el valor máximo en una lista.
max : List Int -> Int
max lista =
    buscar lista (\a b -> a > b)


-- Encuentra el valor mínimo en una lista.
min : List Int -> Int
min lista =
    buscar lista (\a b -> a < b)


-- Ejercicio 3: Filtros por Umbral
-- Devuelve los elementos de una lista que son mayores que un umbral.
maximos : List Int -> Int -> List Int
maximos lista umbral =
    List.filter (\x -> x > umbral) lista


minimos : List Int -> Int -> List Int
minimos lista umbral =
    List.filter (\x -> x < umbral) lista


-- Ejercicio 4: QuickSort
-- Ordena una lista de enteros usando el algoritmo QuickSort.
quickSort : List Int -> List Int
quickSort lista =
    case lista of
        [] ->
            []

        pivot :: resto ->
            let
                -- Elementos menores que el pivote.
                menores =
                    List.filter (\x -> x < pivot) resto

                -- Elementos mayores o iguales al pivote.
                mayoresOIguales =
                    List.filter (\x -> x >= pivot) resto
            in
            -- Une las listas ordenadas.
            (quickSort menores) ++ (pivot :: quickSort mayoresOIguales)


-- Ejercicio 5: Acceso por Índice
-- Obtiene un elemento de una lista por su índice. Devuelve 0 si no lo encuentra.
obtenerElemento : List Int -> Int -> Int
obtenerElemento lista indice =
    case lista of
        [] ->
            0

        x :: xs ->
            if indice == 0 then
                x

            else
                obtenerElemento xs (indice - 1)


-- Ejercicio 6: Mediana
-- Calcula la mediana de una lista de enteros.
mediana : List Int -> Int
mediana lista =
    let
        listaOrdenada =
            quickSort lista

        longitud =
            List.length listaOrdenada
    in
    if longitud == 0 then
        0

    else if modBy 2 longitud == 0 then
        -- Si la longitud es par, toma el primer elemento de los dos centrales.
        obtenerElemento listaOrdenada (longitud // 2 - 1)

    else
        -- Si la longitud es impar, toma el elemento del medio.
        obtenerElemento listaOrdenada (longitud // 2)


-- Ejercicio 7: Contar y Acumular
-- Cuenta la cantidad de elementos en una lista.
contar : List Int -> Int
contar lista =
    List.length lista


acc : List Int -> Int
acc lista =
    List.sum lista


-- Ejercicio 8: Filtrado Genérico
-- Filtra una lista según una condición dada.
filtrar : List Int -> (Int -> Bool) -> List Int
filtrar lista condicion =
    List.filter condicion lista


-- Filtra los números pares de una lista.
filtrarPares : List Int -> List Int
filtrarPares lista =
    filtrar lista (\x -> modBy 2 x == 0)


-- Filtra los múltiplos de 3 de una lista.
filtrarMultiplosDeTres : List Int -> List Int
filtrarMultiplosDeTres lista =
    filtrar lista (\x -> modBy 3 x == 0)


-- Ejercicio 9: Acumulación con Transformación
-- Suma los elementos de una lista después de aplicarles una transformación.
acumular : List Int -> (Int -> Int) -> Int
acumular lista transformacion =
    List.sum (List.map transformacion lista)


acumularUnidad : List Int -> Int
acumularUnidad lista =
    acumular lista (\x -> x)


-- Suma el doble de cada elemento de la lista.
acumularDoble : List Int -> Int
acumularDoble lista =
    acumular lista (\x -> x * 2)


acumularCuadrado : List Int -> Int
acumularCuadrado lista =
    acumular lista (\x -> x * x)


-- Ejercicio 10: Operaciones con Listas
-- Une dos listas en una sola.
unir : List Int -> List Int -> List Int
unir lista1 lista2 =
    lista1 ++ lista2


-- Aplica una función a cada elemento de una lista.
transformar : List Int -> (Int -> a) -> List a
transformar lista transformacion =
    List.map transformacion lista


-- Verifica si un elemento existe en una lista.
existe : List Int -> Int -> Bool
existe lista elemento =
    List.member elemento lista


-- Ejercicio 11: Unión sin Duplicados
-- Une dos listas y elimina los elementos duplicados.
unirOfSet : List Int -> List Int -> List Int
unirOfSet lista1 lista2 =
    removerDuplicados (unir lista1 lista2)


-- Elimina los elementos duplicados de una lista.
removerDuplicados : List Int -> List Int
removerDuplicados lista =
    List.foldl
        (\elemento acc ->
            if List.member elemento acc then
                acc

            else
                -- Añade al principio (operación rápida).
                elemento :: acc
        )
        []
        lista
        -- Revierte la lista al final para mantener el orden original.
        |> List.reverse


-- Ejercicios Opcionales
-- Subconjuntos
-- Genera todos los subconjuntos posibles de una lista.
subSets : List Int -> List (List Int)
subSets lista =
    case lista of
        [] ->
            [ [] ]

        x :: xs ->
            let
                subconjuntosResto =
                    subSets xs
            in
            subconjuntosResto ++ List.map (\subconjunto -> x :: subconjunto) subconjuntosResto


-- Dividir en Grupos
-- Divide una lista en sublistas de un tamaño `n`.
cortar : List Int -> Int -> List (List Int)
cortar lista tamanio =
    if tamanio <= 0 then
        -- Evita bucles infinitos si el tamaño es 0 o negativo.
        []

    else
        case lista of
            [] ->
                []

            _ ->
                let
                    grupo =
                        List.take tamanio lista

                    resto =
                        List.drop tamanio lista
                in
                grupo :: cortar resto tamanio


-- Toma los primeros `n` elementos de una lista.
tomar : Int -> List a -> List a
tomar n lista =
    List.take n lista


-- Salta los primeros `n` elementos y devuelve el resto de la lista.
saltar : Int -> List a -> List a
saltar n lista =
    List.drop n lista
